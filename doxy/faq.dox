/***************************************************************************                                                                                     
*   Copyright 2012 Advanced Micro Devices, Inc.                                     
*                                                                                    
*   Licensed under the Apache License, Version 2.0 (the "License");   
*   you may not use this file except in compliance with the License.                 
*   You may obtain a copy of the License at                                          
*                                                                                    
*       http://www.apache.org/licenses/LICENSE-2.0                      
*                                                                                    
*   Unless required by applicable law or agreed to in writing, software              
*   distributed under the License is distributed on an "AS IS" BASIS,              
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.         
*   See the License for the specific language governing permissions and              
*   limitations under the License.                                                   

***************************************************************************/                                                                                     

/*!
* \page FAQ
* \tableofcontents
* \section General General
* \subsection Q0 When should I use device_vector vs regular host memory?
* bolt::cl::device_vector is used to manage device-local memory and may deliver higher 
* performance on discrete GPU system.  However, the host memory interfaces
* eliminate the need to create and manage device_vectors. 
* If memory is re-used across multiple Bolt calls or is referenced by other
* kernels, using device_vector will deliver higher performance.

* \subsection Q1 How can I avoid including my source functor in my executable?
* \subsection Q2 What profiling and debugging tools does Bolt provide?
* 
*/
