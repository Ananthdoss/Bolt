/***************************************************************************                                                                                     
*   Copyright 2012 Advanced Micro Devices, Inc.                                     
*                                                                                    
*   Licensed under the Apache License, Version 2.0 (the "License");   
*   you may not use this file except in compliance with the License.                 
*   You may obtain a copy of the License at                                          
*                                                                                    
*       http://www.apache.org/licenses/LICENSE-2.0                      
*                                                                                    
*   Unless required by applicable law or agreed to in writing, software              
*   distributed under the License is distributed on an "AS IS" BASIS,              
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.         
*   See the License for the specific language governing permissions and              
*   limitations under the License.                                                   

***************************************************************************/                                                                                     

/*!
 * \mainpage Bolt Documentation
 * \tableofcontents
 * \image html bolt.png

 * \section intro_sec Introduction
 * Bolt is a C++ template library optimized for GPUs.  
 * Bolt provides high-performance library implementations for common algorithms
 * such as scan, reduce, transform, and sort.  
 * The Bolt interface resembles the C++ Standard Template Library (STL). Developers familiar with 
 * STL will recognize many of the Bolt APIs and customization techniques.  
 * In some cases, developers can benefit from GPU acceleration simply by changing the namespace
 * for STL algorithm calls from "std" to "bolt::cl".

 * C++ templates can be used to customize the algorithms with new types (for example, the Bolt \p sort can operate
 * on ints, float, or any custom type defined by the user).
 * Additionally, Bolt lets users customize the template routines using function objects 
 * (functors) written in OpenCL; for example, to provide a custom comparison operation for \p sort, or a custom reduction operation.

 * Bolt can directly interface with host memory structures such as \p std::vector 
 * or host arrays (ie \p float*).  On today's GPU systems, the host memory is mapped or copied automatically to the GPU.  
 * On future systems that support the Heterogeneous System Architecture, the GPU will directly access the host data structures. 
 * Bolt also provides a bolt::cl::device_vector that can be used to allocate and manage device-local memory 
 * for higher performance on discrete GPU systems.  Bolt APIs can accept either host memory or the device vector.

 * This document introduces the architecture of Bolt and also provides a reference for the Bolt APIs.  
 * 

 * \section example_sec Examples
 * The simple example below shows how to use Bolt to sort a random array of 8192 integers.  
 \code
#include <bolt/cl/sort.h>
#include <vector>
#include <algorithm>
 
void main()
{
    // generate random data (on host)
    std::vector<int> a(8192);
    std::generate(a.begin(), a.end(), rand);

    // sort, run on best device in the platform
    bolt::cl::sort(a.begin(), a.end());
}
\endcode

 * The code is very similar to familiar C++ Standard Template Library; the 
 * only difference is the include file (bolt/cl/sort.h) and the \p bolt::cl namespace before the \p sort call.  
 * If the include were removed and the \p bolt::cl namespace changed to \p std, the code would use the STL version of sort. 
 * Bolt developers do not need to learn a new device-specific programming model to leverage the power and performance 
 * advantages of GPU computing.
  
 * The example demonstrates two important features of Bolt:
 * \li The host-allocated vector "a" is directly passed to the Bolt \p sort routine, without a need to explicitly allocate and 
 *      manage GPU device memory.
 * \li The Bolt \p bolt::cl::sort call submits to the platform, rather than a specific device.  The Bolt runtime selects
*      the best device to run the sort, potentially running it on the CPU in the event a GPU is not available or the sort 
*      size is too small to benefit from GPU acceleration.


 * \section Requirements Requirements 
 * Bolt requires an OpenCL(TM) implementation that supports the static C++ kernel
 * features; specifically, C++ template support for OpenCL(TM) kernels.  Currently,
 * the AMD OpenCL(TM) SDK 2.7 provides this support; other vendors may adopt this feature in the future.  
 */
